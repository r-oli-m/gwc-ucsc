{"ast":null,"code":"var _jsxFileName = \"/Users/reva/Desktop/projects/ucsc-gwc-webapp/frontend/src/components/PeopleList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles/PeopleList.css';\nimport { FaLinkedin } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PeopleList = () => {\n  _s();\n  const [people, setPeople] = useState([]);\n  useEffect(() => {\n    const fetchPeople = async () => {\n      try {\n        // Use full URL to fetch data from the backend\n        const response = await fetch('http://localhost:5001/people');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setPeople(data);\n      } catch (error) {\n        console.error('Error fetching people:', error);\n      }\n    };\n    fetchPeople();\n  }, []);\n  const convertGoogleDriveLink = driveLink => {\n    const match = driveLink.match(/id=([^&]+)/);\n    if (match) {\n      const fileId = match[1];\n      return `https://drive.google.com/uc?id=${fileId}`;\n    } else {\n      throw new Error('Invalid Google Drive link');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"ot-title\",\n      children: \"Our Team\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"people-list\",\n      children: people.map((person, index) => {\n        const {\n          firstName,\n          middleName,\n          lastName,\n          profilePic,\n          role,\n          linkedin\n        } = person; // Destructure the properties\n        const fullName = `${firstName} ${middleName} ${lastName}`.trim(); // Construct full name\n        const imageUrl = convertGoogleDriveLink(profilePic);\n        console.log(imageUrl);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"person-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://drive.google.com/uc?id=1oImVx4kGOdKEnEi_cKk4Gxr5Sm-6aqs1\",\n            alt: fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"person-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              href: linkedin,\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: /*#__PURE__*/_jsxDEV(FaLinkedin, {\n                className: \"linkedin-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: role\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(PeopleList, \"iLHt2u73MC8pQH7JexuLSo07ahk=\");\n_c = PeopleList;\nexport default PeopleList;\nvar _c;\n$RefreshReg$(_c, \"PeopleList\");","map":{"version":3,"names":["React","useEffect","useState","FaLinkedin","jsxDEV","_jsxDEV","PeopleList","_s","people","setPeople","fetchPeople","response","fetch","ok","Error","data","json","error","console","convertGoogleDriveLink","driveLink","match","fileId","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","person","index","firstName","middleName","lastName","profilePic","role","linkedin","fullName","trim","imageUrl","log","src","alt","href","target","rel","_c","$RefreshReg$"],"sources":["/Users/reva/Desktop/projects/ucsc-gwc-webapp/frontend/src/components/PeopleList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles/PeopleList.css';\nimport { FaLinkedin } from \"react-icons/fa\";\n\nconst PeopleList = () => {\n  const [people, setPeople] = useState([]);\n\n  useEffect(() => {\n    const fetchPeople = async () => {\n      try {\n        // Use full URL to fetch data from the backend\n        const response = await fetch('http://localhost:5001/people');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setPeople(data);\n      } catch (error) {\n        console.error('Error fetching people:', error);\n      }\n    };\n\n    fetchPeople();\n  }, []);\n\n  const convertGoogleDriveLink = (driveLink) => {\n    const match = driveLink.match(/id=([^&]+)/);\n    if (match) {\n        const fileId = match[1];\n        return `https://drive.google.com/uc?id=${fileId}`;\n    } else {\n        throw new Error('Invalid Google Drive link');\n    }\n};\n  \n\n  return (\n    <div>\n      <h1 className='ot-title'>Our Team</h1>\n      <div className=\"people-list\">\n        {people.map((person, index) => {\n          const { firstName, middleName, lastName, profilePic, role, linkedin } = person; // Destructure the properties\n          const fullName = `${firstName} ${middleName} ${lastName}`.trim(); // Construct full name\n          const imageUrl = convertGoogleDriveLink(profilePic);\n          console.log(imageUrl)\n          return (\n            <div key={index} className=\"person-card\">\n              <img src=\"https://drive.google.com/uc?id=1oImVx4kGOdKEnEi_cKk4Gxr5Sm-6aqs1\"alt={fullName} /> {/* Use the profilePic field directly */}\n              <div className='person-info'>\n                <a href={linkedin} target=\"_blank\" rel=\"noreferrer\">\n                  <FaLinkedin className='linkedin-icon' />\n                </a>\n                <h3>{fullName}</h3>\n                <p>{role}</p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PeopleList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}